// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String      @id @default(cuid())
  firstName       String
  lastName        String?
  email           String      @unique
  profileImgUrl   String?
  posts           Post[]
  likedPosts      Likes[]
  bookmarkedPosts Bookmarks[]
  comments        Comments[]

  followers  Follows[] @relation("following")
  followings Follows[] @relation("follower")

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Follows {
  follower   User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String

  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  @@id([followerId, followingId])
}

model Likes {
  post        Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String
  likedUser   User   @relation(fields: [likedUserId], references: [id], onDelete: Cascade)
  likedUserId String

  @@id([postId, likedUserId])
}

model Bookmarks {
  post             Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId           String
  bookmarkedUser   User   @relation(fields: [bookmarkedUserId], references: [id], onDelete: Cascade)
  bookmarkedUserId String

  @@id([postId, bookmarkedUserId])
}

model Comments {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  comment   String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Post {
  id        String      @id @default(cuid())
  content   String
  imageUrl  String?
  author    User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  likes     Likes[]
  bookmarks Bookmarks[]
  comments  Comments[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}
